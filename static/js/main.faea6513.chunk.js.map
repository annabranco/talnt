{"version":3,"sources":["api/endpoints.ts","api/index.ts","components/elements/Dropdown/styles.ts","constants/index.ts","components/elements/Dropdown/index.tsx","components/sections/Header/styles.ts","components/sections/Header/index.tsx","components/elements/Article/styles.ts","components/elements/Article/index.tsx","components/sections/Main/styles.ts","components/sections/Main/index.tsx","components/sections/Search/styles.ts","components/sections/Search/index.tsx","components/core/App/styles.ts","styles/global.ts","components/core/App/index.tsx","index.tsx"],"names":["API_SERVER","REGIONS_ENDPOINT","COMPANIES_ENDPOINT","TAGS_ENDPOINT","MOVES_ENDPOINT","SEARCH_PATH","dbPaths","fetchData","URL","axios","get","then","data","status","code","success","Error","catch","error","console","getAllDataFromServer","all","map","path","spread","companies","moves","regions","searchData","query","SWrapperElement","styled","div","color","displayName","SDropdown","select","SOption","option","REGIONS","SEARCH_HERE","MIN_CHARS","Dropdown","type","data-test-id","defaultValue","disabled","length","value","item","acronym","description","reference","name","JSON","stringify","defaultProps","header","SLogo","h1","Header","state","SArticleWrapper","article","SArticleTitle","h2","SArticleText","p","SReadMoreButton","button","Article","text","useState","isCuttingText","toggleIsCuttingText","useEffect","slice","onClick","defaultArticle","articleNotFound","Main","searchResults","searchString","SSearchWrapper","aside","SSearchInput","input","SSearchLabel","label","css","SSearchTitle","h3","Search","onSearch","showLabel","toggleLabel","waitForDebouceTimer","useRef","htmlFor","id","onBlur","onChange","event","current","setTimeout","target","onFocus","placeholder","window","innerHeight","SAppContainer","SMainArea","FakeElement","GlobalStyles","createGlobalStyle","initialState","keyframes","App","serverData","updateServerData","updateSearchResults","updateSearchString","a","search","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.faea6513.chunk.js","sourcesContent":["export const API_SERVER = 'https://api.staging.talnt.sh';\r\n\r\nexport const REGIONS_ENDPOINT = `${API_SERVER}/v1/regions`;\r\nexport const COMPANIES_ENDPOINT = `${API_SERVER}/v1/companies`;\r\nexport const TAGS_ENDPOINT = `${API_SERVER}/v1/tags`;\r\nexport const MOVES_ENDPOINT = `${API_SERVER}/v1/moves`;\r\nexport const TAXONOMIES_ENDPOINT = `${API_SERVER}/v1/taxonomies`;\r\n\r\nexport const SEARCH_PATH = `${TAGS_ENDPOINT}?search=`;\r\n","import axios from 'axios';\r\nimport { IApiData, IApiResponse, IAppState } from '../types/interfaces';\r\nimport {\r\n  REGIONS_ENDPOINT,\r\n  COMPANIES_ENDPOINT,\r\n  MOVES_ENDPOINT,\r\n  SEARCH_PATH\r\n} from './endpoints';\r\n\r\nconst dbPaths = [COMPANIES_ENDPOINT, MOVES_ENDPOINT, REGIONS_ENDPOINT];\r\n\r\nexport const fetchData = (URL: string): Promise<IApiData> =>\r\n  axios\r\n    .get(URL)\r\n    .then(({ data }: { data: IApiResponse }) => {\r\n      if (data.status?.code === 200) {\r\n        return data.success;\r\n      }\r\n      throw new Error('Received unknown status when fetching data');\r\n    })\r\n    .catch(error =>\r\n      console.error(`Failed to get data from ${URL}. ${error}.`)\r\n    ) as Promise<IApiData>;\r\n\r\nexport const getAllDataFromServer = (): Promise<IAppState> =>\r\n  axios\r\n    .all(dbPaths.map(path => fetchData(path)))\r\n    .then(\r\n      axios.spread((companies, moves, regions) => ({\r\n        companies,\r\n        moves,\r\n        regions\r\n      }))\r\n    )\r\n    .catch(error =>\r\n      console.error(`Failed to get database. ${error}.`)\r\n    ) as Promise<IAppState>;\r\n\r\nexport const searchData = (query: string): Promise<IApiData> =>\r\n  fetchData(`${SEARCH_PATH}${query}`);\r\n","import styled from 'styled-components';\r\n\r\ninterface SWrapperElementProps extends React.ComponentPropsWithoutRef<'div'> {\r\n  color?: string;\r\n}\r\n\r\nexport const SWrapperElement = styled.div<SWrapperElementProps>`\r\n  background: ${({ color }) => color || 'none'};\r\n`;\r\nSWrapperElement.displayName = 'SWrapperElement';\r\n\r\nexport const SDropdown = styled.select`\r\n  height: 30px;\r\n  border: 1px solid white;\r\n  cursor: pointer;\r\n  background: linear-gradient(to right, skyblue, transparent);\r\n  border-radius: 40px;\r\n  padding: 5px 20px;\r\n  border: none;\r\n  font-weight: 700;\r\n  outline: none;\r\n\r\n  &:disabled {\r\n    background: rgba(255, 255, 255, 0.4);\r\n    color: darkgray;\r\n    cursor: not-allowed;\r\n  }\r\n  &:focus {\r\n    background: linear-gradient(to right, yellow, transparent);\r\n  }\r\n`;\r\nSDropdown.displayName = 'SDropdown';\r\n\r\nexport const SOption = styled.option`\r\n  font-size: 0.8rem;\r\n  color: black;\r\n  border-radius: 5px;\r\n  background: rgba(135, 206, 235, 0.7);\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\nSOption.displayName = 'SOption';\r\n","export const COMPANIES = 'Companies';\r\nexport const MOVES = 'Moves';\r\nexport const REGIONS = 'Regions';\r\nexport const WELCOME = 'Welcome to TALNT';\r\nexport const THANKS =\r\n  \"Thank you for visiting our page. Please don't exitate in get in touch if you have any questions.\";\r\nexport const READ_MORE = 'Read more';\r\nexport const NOT_FOUND_TITLE = 'Not found';\r\nexport const NOT_FOUND_TEXT = \"We're sorry but your search returned no results\";\r\nexport const SEARCH_HERE = 'Search here';\r\nexport const MIN_CHARS = 'min 2 chars';\r\nexport const SEARCH = 'Search on our database';\r\n","import { Fragment, ReactElement } from 'react';\r\nimport { oneOf } from 'prop-types';\r\nimport { IApiData, IGenericData, IRegions } from '../../../types/interfaces';\r\nimport { PApiData } from '../../../types/propTypes';\r\nimport { SDropdown, SOption, SWrapperElement } from './styles';\r\nimport { REGIONS, COMPANIES, MOVES } from '../../../constants/index';\r\n\r\nexport interface IDropdownProps {\r\n  data: IApiData;\r\n  type: string;\r\n}\r\n\r\nconst Dropdown = ({ data, type }: IDropdownProps): ReactElement => {\r\n  return (\r\n    <SWrapperElement>\r\n      <SDropdown\r\n        data-test-id={`dropdown_${type}`}\r\n        defaultValue={type}\r\n        disabled={data.length === 0}\r\n      >\r\n        <SOption\r\n          data-test-id={`first-option_${type}`}\r\n          disabled\r\n          key={`defaultOption${type}`}\r\n          value={type}\r\n        >\r\n          {type}\r\n        </SOption>\r\n        {data.map((item: IGenericData | IRegions) => (\r\n          <Fragment key={JSON.stringify(item)}>\r\n            {type === REGIONS ? (\r\n              <SOption\r\n                data-test-id={`options_${type}`}\r\n                value={(item as IRegions).acronym}\r\n              >\r\n                {(item as IRegions).description}\r\n              </SOption>\r\n            ) : (\r\n              <SOption\r\n                data-test-id={`options_${type}`}\r\n                value={(item as IGenericData).reference}\r\n              >\r\n                {(item as IGenericData).name}\r\n              </SOption>\r\n            )}\r\n          </Fragment>\r\n        ))}\r\n      </SDropdown>\r\n    </SWrapperElement>\r\n  );\r\n};\r\n\r\nDropdown.propTypes = {\r\n  data: PApiData,\r\n  type: oneOf([REGIONS, COMPANIES, MOVES]).isRequired\r\n};\r\n\r\nDropdown.defaultProps = {\r\n  data: []\r\n};\r\n\r\nexport default Dropdown;\r\n","import styled from 'styled-components';\r\n\r\ninterface SWrapperElementProps\r\n  extends React.ComponentPropsWithoutRef<'header'> {\r\n  color?: string;\r\n}\r\n\r\nexport const SWrapperElement = styled.header<SWrapperElementProps>`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  background: ${({ color }) => color || 'none'};\r\n  transform: translate(0, -10%);\r\n  font-size: 1 rem;\r\n  color: red;\r\n  width: 90%;\r\n`;\r\nSWrapperElement.displayName = 'SWrapperElement';\r\n\r\nexport const SLogo = styled.h1`\r\n  font-size: 5rem;\r\n  font-weight: 700;\r\n  -webkit-text-stroke: 2px blue;\r\n  letter-spacing: -5px;\r\n`;\r\nSLogo.displayName = 'SLogo';\r\n","import { ReactElement } from 'react';\r\nimport Dropdown from '../../elements/Dropdown';\r\nimport { SLogo, SWrapperElement } from './styles';\r\nimport { IAppState } from '../../../types/interfaces';\r\nimport { PAppState } from '../../../types/propTypes';\r\nimport { COMPANIES, MOVES, REGIONS } from '../../../constants';\r\n\r\nexport interface IHeaderProps {\r\n  state: IAppState;\r\n}\r\n\r\nconst Header = ({\r\n  state: { companies, moves, regions }\r\n}: IHeaderProps): ReactElement => {\r\n  return (\r\n    <SWrapperElement>\r\n      <SLogo data-test-id=\"logo\">TALNT</SLogo>\r\n      <Dropdown data={regions} type={REGIONS} />\r\n      <Dropdown data={companies} type={COMPANIES} />\r\n      <Dropdown data={moves} type={MOVES} />\r\n    </SWrapperElement>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  state: PAppState.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\ninterface SArticleWrapperProps\r\n  extends React.ComponentPropsWithoutRef<'article'> {\r\n  color: string;\r\n}\r\n\r\nexport const SArticleWrapper = styled.article<SArticleWrapperProps>`\r\n  background: ${({ color }) => color || 'none'};\r\n  border: 1px solid gray;\r\n  border-radius: 10px;\r\n  margin: 2px 0;\r\n  padding: 0 50px;\r\n  font-size: 1 rem;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  max-width: 100%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n\r\n  &:hover {\r\n    background: yellow;\r\n  }\r\n`;\r\nSArticleWrapper.displayName = 'SArticleWrapper';\r\n\r\nexport const SArticleTitle = styled.h2`\r\n  margin-right: 30px;\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n`;\r\nSArticleTitle.displayName = 'SArticleTitle';\r\n\r\nexport const SArticleText = styled.p`\r\n  color: black;\r\n`;\r\nSArticleText.displayName = 'SArticleText';\r\n\r\nexport const SReadMoreButton = styled.button`\r\n  font-size: 0.7rem;\r\n  color: black;\r\n  margin-right: -40px;\r\n  border-radius: 5px;\r\n  line-height: 0.8;\r\n  padding: 2px;\r\n`;\r\nSReadMoreButton.displayName = 'SReadMoreButton';\r\n","import { ReactElement, useEffect, useState } from 'react';\r\nimport {\r\n  SArticleTitle,\r\n  SArticleText,\r\n  SArticleWrapper,\r\n  SReadMoreButton\r\n} from './styles';\r\nimport { IGenericData } from '../../../types/interfaces';\r\nimport { PGenericData } from '../../../types/propTypes';\r\nimport { READ_MORE } from '../../../constants';\r\n\r\nexport interface IArticleProps {\r\n  data: IGenericData;\r\n}\r\n\r\nconst Article = ({ data }: IArticleProps): ReactElement => {\r\n  const [isCuttingText, toggleIsCuttingText] = useState(false);\r\n\r\n  const formatLargeText = (text: string): string =>\r\n    isCuttingText ? `${text.slice(0, 97)}...` : text;\r\n\r\n  useEffect(() => {\r\n    toggleIsCuttingText(data.name.length > 100);\r\n  }, [data]);\r\n\r\n  return (\r\n    <SArticleWrapper color=\"#ffe0c1\">\r\n      <SArticleTitle data-test-id=\"article-title\">\r\n        {data.reference}\r\n      </SArticleTitle>\r\n      <SArticleText data-test-id=\"article-text\">\r\n        {formatLargeText(data.name)}\r\n      </SArticleText>\r\n      {data.name.length > 100 && isCuttingText && (\r\n        <SReadMoreButton onClick={() => toggleIsCuttingText(false)}>\r\n          {READ_MORE}\r\n        </SReadMoreButton>\r\n      )}\r\n    </SArticleWrapper>\r\n  );\r\n};\r\n\r\nArticle.propTypes = {\r\n  data: PGenericData.isRequired\r\n};\r\n\r\nexport default Article;\r\n","import styled from 'styled-components';\r\n\r\ninterface SWrapperElementProps extends React.ComponentPropsWithoutRef<'div'> {\r\n  color?: string;\r\n}\r\n\r\nexport const SWrapperElement = styled.div<SWrapperElementProps>`\r\n  background: ${({ color }) => color || 'none'};\r\n  height: 90%;\r\n  max-height: 90%;\r\n  width: 80%;\r\n  overflow-y: auto;\r\n  padding: 5px 20px;\r\n`;\r\nSWrapperElement.displayName = 'SWrapperElement';\r\n","import { ReactElement } from 'react';\r\nimport { arrayOf, string } from 'prop-types';\r\nimport Article from '../../elements/Article';\r\nimport { SWrapperElement } from './styles';\r\nimport { IGenericData } from '../../../types/interfaces';\r\nimport { PGenericData } from '../../../types/propTypes';\r\nimport {\r\n  NOT_FOUND_TEXT,\r\n  NOT_FOUND_TITLE,\r\n  THANKS,\r\n  WELCOME\r\n} from '../../../constants';\r\n\r\nexport interface IMainProps {\r\n  searchResults: IGenericData[];\r\n  searchString: string;\r\n}\r\n\r\nexport const defaultArticle = {\r\n  reference: WELCOME,\r\n  name: THANKS\r\n};\r\n\r\nexport const articleNotFound = {\r\n  reference: NOT_FOUND_TITLE,\r\n  name: NOT_FOUND_TEXT\r\n};\r\n\r\nconst Main = ({ searchResults, searchString }: IMainProps): ReactElement => {\r\n  return (\r\n    <SWrapperElement>\r\n      {searchResults.length === 0 ? (\r\n        <Article data={searchString ? articleNotFound : defaultArticle} />\r\n      ) : (\r\n        <>\r\n          {searchResults.map(item => (\r\n            <Article data={item} key={JSON.stringify(item)} />\r\n          ))}\r\n        </>\r\n      )}\r\n    </SWrapperElement>\r\n  );\r\n};\r\n\r\nMain.propTypes = {\r\n  searchResults: arrayOf(PGenericData).isRequired,\r\n  searchString: string.isRequired\r\n};\r\n\r\nexport default Main;\r\n","import styled, { css } from 'styled-components';\r\nimport { MIN_CHARS } from '../../../constants';\r\n\r\ninterface SSearchWrapperProps extends React.ComponentPropsWithoutRef<'aside'> {\r\n  color?: string;\r\n}\r\n\r\nexport const SSearchWrapper = styled.aside<SSearchWrapperProps>`\r\n  position: relative;\r\n  background: ${({ color }) => color || 'none'};\r\n  height: 100%;\r\n  width: 20%;\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\nSSearchWrapper.displayName = 'SSearchWrapper';\r\n\r\nexport const SSearchInput = styled.input`\r\n  width: 100%;\r\n  font-size: 1 rem;\r\n  color: gray;\r\n  text-decoration: double;\r\n`;\r\nSSearchInput.displayName = 'SSearchInput';\r\n\r\ninterface SSearchLabelProps extends React.ComponentPropsWithoutRef<'label'> {\r\n  text: string;\r\n}\r\n\r\nexport const SSearchLabel = styled.label<SSearchLabelProps>`\r\n  position: absolute;\r\n  right: 35px;\r\n  top: 39px;\r\n  background: linear-gradient(to bottom, rgba(211, 211, 211, 0.8), white);\r\n  padding: 0 5px;\r\n  font-size: 0.8rem;\r\n  color: black;\r\n  text-align: right;\r\n  font-weight: 600;\r\n\r\n  ${({ text }) =>\r\n    text === MIN_CHARS &&\r\n    css`\r\n      color: crimson;\r\n    `}\r\n`;\r\nSSearchLabel.displayName = 'SSearchLabel';\r\n\r\nexport const SSearchTitle = styled.h3`\r\n  margin: 10px 0;\r\n  font-size: 0.9rem;\r\n  font-weight: 700;\r\n  color: darkblue;\r\n  text-align: center;\r\n`;\r\nSSearchTitle.displayName = 'SSearchTitle';\r\n","import { ReactElement, useState, useEffect, ChangeEvent, useRef } from 'react';\r\nimport { func, string } from 'prop-types';\r\nimport {\r\n  SSearchInput,\r\n  SSearchLabel,\r\n  SSearchWrapper,\r\n  SSearchTitle\r\n} from './styles';\r\nimport { MIN_CHARS, SEARCH, SEARCH_HERE } from '../../../constants';\r\n\r\nexport interface ISearchProps {\r\n  onSearch: (query: string) => void;\r\n  searchString: string;\r\n}\r\n\r\nconst Search = ({ onSearch, searchString }: ISearchProps): ReactElement => {\r\n  const [showLabel, toggleLabel] = useState('');\r\n  const waitForDebouceTimer = useRef(\r\n    null as null | ReturnType<typeof setTimeout>\r\n  );\r\n\r\n  const onFocusInput = () => {\r\n    if (searchString.length < 2) {\r\n      toggleLabel(MIN_CHARS);\r\n    } else {\r\n      toggleLabel(SEARCH_HERE);\r\n    }\r\n  };\r\n\r\n  const onBlurInput = () => {\r\n    if (!searchString) {\r\n      toggleLabel('');\r\n    }\r\n  };\r\n\r\n  const onChange = (event: ChangeEvent) => {\r\n    if (!waitForDebouceTimer.current) {\r\n      waitForDebouceTimer.current = setTimeout(() => {\r\n        waitForDebouceTimer.current = null;\r\n        onSearch((event.target as HTMLInputElement).value);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (searchString) {\r\n      if (searchString.length < 2) {\r\n        toggleLabel(MIN_CHARS);\r\n      } else {\r\n        toggleLabel(SEARCH_HERE);\r\n      }\r\n    } else {\r\n      toggleLabel('');\r\n    }\r\n  }, [searchString]);\r\n\r\n  return (\r\n    <SSearchWrapper data-test-id=\"search-wrapper\">\r\n      <SSearchTitle data-test-id=\"search-title\">{SEARCH}</SSearchTitle>\r\n      {showLabel && (\r\n        <SSearchLabel\r\n          data-test-id=\"search-label\"\r\n          htmlFor=\"search\"\r\n          text={showLabel}\r\n        >\r\n          {showLabel}\r\n        </SSearchLabel>\r\n      )}\r\n      <SSearchInput\r\n        data-test-id=\"search-input\"\r\n        id=\"search\"\r\n        name=\"search\"\r\n        onBlur={onBlurInput}\r\n        onChange={onChange}\r\n        onFocus={onFocusInput}\r\n        placeholder={SEARCH_HERE}\r\n        type=\"text\"\r\n      />\r\n    </SSearchWrapper>\r\n  );\r\n};\r\n\r\nSearch.propTypes = {\r\n  onSearch: func.isRequired,\r\n  searchString: string.isRequired\r\n};\r\n\r\nexport default Search;\r\n","import styled from 'styled-components';\r\n\r\ninterface SWrapperElementProps extends React.ComponentPropsWithoutRef<'div'> {\r\n  color: string;\r\n}\r\n\r\nexport const SWrapperElement = styled.div<SWrapperElementProps>`\r\n  background: rgba(100, 100, 100, 0.1);\r\n  filter: blur(2);\r\n  border-radius: 40px;\r\n  margin: 50px auto;\r\n  height: ${`${window.innerHeight * 0.8}px`};\r\n  width: 90%;\r\n  box-shadow: 0 0 50px 10px rgba(100, 100, 100, 0.6),\r\n    inset 0 0 10px rgba(100, 100, 100, 0.6);\r\n  padding: 40px;\r\n`;\r\nSWrapperElement.displayName = 'SWrapperElement';\r\n\r\nexport const SAppContainer = styled(SWrapperElement)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nSAppContainer.displayName = 'SAppContainer';\r\n\r\nexport const SMainArea = styled(SWrapperElement)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 10px auto;\r\n  max-height: 80%;\r\n`;\r\nSMainArea.displayName = 'SMainArea';\r\n\r\nexport const FakeElement = styled.div``;\r\nFakeElement.displayName = 'FakeElement';\r\n","import { createGlobalStyle, keyframes } from 'styled-components';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n\tbox-sizing: border-box;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\nh1 {\r\n  font-family: sans-serif;\r\n  font-size: 3rem;\r\n  font-weight: 700;\r\n  color: skyblue;\r\n}\r\nh2, h3, h4, h5, h6 {\r\n  font-family: sans-serif;\r\n  font-size: 1.5rem;\r\n  font-weight: 500;\r\n  color: steelblue;\r\n}\r\ndiv, p {\r\n  font-family: serif;\r\n  font-size: 1rem;\r\n  color: black;\r\n  }\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n`;\r\n\r\nexport const Appear = keyframes`\r\n  0%, 50% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const Disappear = keyframes`\r\n  0%, 90% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n`;\r\n","import { ReactElement, useEffect, useState } from 'react';\r\nimport { getAllDataFromServer, searchData } from '../../../api';\r\nimport Header from '../../sections/Header';\r\nimport Main from '../../sections/Main';\r\nimport Search from '../../sections/Search';\r\nimport { IAppState, IGenericData } from '../../../types/interfaces';\r\nimport { SAppContainer, SMainArea, FakeElement } from './styles';\r\nimport { GlobalStyles } from '../../../styles/global';\r\n\r\nexport const initialState = {\r\n  companies: [],\r\n  moves: [],\r\n  regions: []\r\n};\r\n\r\nconst App = (): ReactElement => {\r\n  const [serverData, updateServerData] = useState(initialState as IAppState);\r\n  const [searchResults, updateSearchResults] = useState(\r\n    [] as IGenericData[] | never[]\r\n  );\r\n  const [searchString, updateSearchString] = useState('');\r\n\r\n  const onSearch = async (query: string) => {\r\n    updateSearchString(query);\r\n    if (query.length >= 2) {\r\n      const search = (await searchData(query)) as IGenericData[];\r\n      if (search) {\r\n        updateSearchResults(search);\r\n      }\r\n    } else {\r\n      updateSearchResults([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllDataFromServer().then((data: IAppState) => {\r\n      updateServerData(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <SAppContainer color=\"lightgray\">\r\n      <GlobalStyles />\r\n      <Header state={serverData} />\r\n      <SMainArea color=\"darkgray\">\r\n        <Main searchResults={searchResults} searchString={searchString} />\r\n        <Search searchString={searchString} onSearch={onSearch} />\r\n      </SMainArea>\r\n      <FakeElement onClick={getAllDataFromServer} />\r\n    </SAppContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/core/App';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}